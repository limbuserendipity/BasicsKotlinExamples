package functions

/*
Анонимные функции в Kotlin
---------------------------

Анонимная функция — это функция без имени, которая может быть присвоена переменной,
передана в другую функцию в качестве аргумента или возвращена из функции.
Они объявляются с использованием ключевого слова `fun`,
но без указания имени функции.

Анонимные функции позволяют:

- Создавать функции "на лету" без необходимости объявлять их с именем.
- Присваивать функции переменным и вызывать их через эти переменные.
- Передавать функции как аргументы другим функциям, что делает код более гибким.
- Возвращать функции из других функций.

Синтаксис анонимной функции:

val имяПеременной = fun(параметры): ВозвращаемыйТип {
    // Тело функции
    return значение
}
*/


// Главная функция для запуска всех примеров.
fun main() {

}

// 1. Простой пример анонимной функции, присвоенной переменной
fun example1() {
    // Создаём анонимную функцию, которая выводит приветствие, и присваиваем её переменной 'greet'.
    val greet = fun() {
        println("Привет, мир!")
    }

    // Вызываем функцию 'greet'.
    greet() // Вывод: Привет, мир!
}

// 2. Анонимная функция с одним параметром
fun example2() {
    // Создаём анонимную функцию, которая принимает число и выводит его квадрат.
    val square = fun(number: Int) {
        val result = number * number
        println("Квадрат числа $number равен $result")
    }

    // Вызываем функцию 'square' с аргументом 5.
    square(5) // Вывод: Квадрат числа 5 равен 25
}

// 3. Анонимная функция с возвращаемым значением
fun example3() {
    // Создаём анонимную функцию, которая умножает два числа и возвращает результат.
    val multiply = fun(a: Int, b: Int): Int {
        return a * b
    }

    // Вызываем функцию 'multiply' и сохраняем результат в переменной 'product'.
    val product = multiply(4, 3)
    println("Произведение 4 и 3 равно $product") // Вывод: Произведение 4 и 3 равно 12
}

// 4. Анонимная функция в качестве аргумента другой функции
fun example4() {
    // Функция, которая выполняет заданную операцию над двумя числами.
    fun calculate(a: Int, b: Int, operation: (Int, Int) -> Int): Int {
        return operation(a, b)
    }

    // Передаём анонимную функцию для сложения в функцию 'calculate'.
    val sum = calculate(10, 5, fun(x: Int, y: Int): Int {
        return x + y
    })
    println("Сумма 10 и 5 равна $sum") // Вывод: Сумма 10 и 5 равна 15
}

// 5. Анонимная функция внутри другой функции
fun example5() {
    // Функция, которая приветствует пользователя и затем выполняет дополнительное действие.
    fun greetUser(name: String) {
        println("Привет, $name!")

        // Создаём анонимную функцию для показа дополнительного сообщения.
        val showMessage = fun() {
            println("Добро пожаловать в наше приложение!")
        }

        // Вызываем анонимную функцию 'showMessage'.
        showMessage()
    }

    // Вызываем функцию 'greetUser' с именем "Анна".
    greetUser("Анна")
    // Вывод:
    // Привет, Анна!
    // Добро пожаловать в наше приложение!
}

// 6. Анонимная функция с условием
fun example6() {
    // Создаём анонимную функцию, которая проверяет, является ли число чётным.
    val isEven = fun(number: Int): Boolean {
        return number % 2 == 0
    }

    // Проверяем число 7.
    val number = 7
    if (isEven(number)) {
        println("$number является чётным числом.")
    } else {
        println("$number является нечётным числом.")
    }
    // Вывод: 7 является нечётным числом.
}

// 7. Анонимная функция для повторения сообщения
fun example7() {
    // Создаём анонимную функцию, которая повторяет сообщение заданное количество раз.
    val repeatMessage = fun(message: String, times: Int) {
        for (i in 1..times) {
            println("$i. $message")
        }
    }

    // Используем функцию для повторения сообщения.
    repeatMessage("Привет, Kotlin!", 3)
    // Вывод:
    // 1. Привет, Kotlin!
    // 2. Привет, Kotlin!
    // 3. Привет, Kotlin!
}

// 8. Анонимная функция с доступом к внешней переменной (замыкание)
fun example8() {
    // Внешняя переменная.
    var counter = 0

    // Анонимная функция, которая увеличивает значение 'counter' на 1.
    val incrementCounter = fun() {
        counter++
    }

    // Вызываем функцию несколько раз.
    incrementCounter()
    incrementCounter()
    incrementCounter()

    println("Значение счётчика: $counter") // Вывод: Значение счётчика: 3
}

// 9. Анонимная функция для конвертации градусов Цельсия в Фаренгейты
fun example9() {
    // Создаём анонимную функцию для конвертации температуры.
    val celsiusToFahrenheit = fun(celsius: Double): Double {
        return celsius * 9 / 5 + 32
    }

    val celsius = 25.0
    val fahrenheit = celsiusToFahrenheit(celsius)
    println("$celsius градусов Цельсия равно $fahrenheit градусам Фаренгейта.")
    // Вывод: 25.0 градусов Цельсия равно 77.0 градусам Фаренгейта.
}

// 10. Анонимная функция как возвращаемое значение другой функции
fun example10() {
    // Функция, которая возвращает анонимную функцию.
    fun getGreetingFunction(): () -> Unit {
        return fun() {
            println("Здравствуйте! Хорошего дня!")
        }
    }

    // Получаем функцию и вызываем её.
    val greetFunction = getGreetingFunction()
    greetFunction() // Вывод: Здравствуйте! Хорошего дня!
}