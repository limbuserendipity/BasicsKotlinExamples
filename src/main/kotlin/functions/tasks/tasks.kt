package functions.tasks

import kotlin.random.Random

fun main(){
//    task1()
    task2()
    task3()
}

/*
Task1: Игра "Угадай число"

Задание: Напиши функцию, в которой компьютер пытается угадать число, загаданное пользователем от 1 до 1000. Пользователь должен давать подсказки "больше" или "меньше" после каждой попытки компьютера, пока компьютер не угадает правильно.
Подсказка: Используй цикл `while` для повторных попыток и условные операторы `if`/`else` для обработки подсказок пользователя.
*/
fun task1() {
    val rand = Random.nextInt(1, 1000)
    while (true) {
        print("Угадайте число от 1 до 1000: ")
        val num = readLine()!!.toInt()
        if (num == rand) {
            println("Поздравляем, вы угадали!")
            break
        }
        else if (num > rand) {
            println("Ваше число больше загаданного.")
        }
        else if (num < rand) {
            println("Ваше число меньше загаданного.")
        }
    }
}

/*
Task2: Сортировка списка с использованием функции высшего порядка

Задание: Напиши функцию, которая принимает список чисел и функцию-компаратор (лямбда-выражение). Используй эту функцию, чтобы отсортировать список по возрастанию и по убыванию. Выведи оба результата.
Подсказка: Используй функцию `sortedWith` и передавай лямбда-выражение для задания порядка сортировки.
*/
fun task2() {
    fun sortList(numbers: List<Int>, comparator: (Int, Int) -> Int): List<Int> {
        return numbers.sortedWith(comparator)
    }

    val numbers = listOf(1, 3, 5, 10)

    val ascendingOrder = sortList(numbers) { a, b -> a.compareTo(b) }
    println("Сортировка по возрастанию: $ascendingOrder")

    val descendingOrder = sortList(numbers) { a, b -> b.compareTo(a) }
    println("Сортировка по убыванию: $descendingOrder")
}

/*
Task3: Чётные и нечётные числа

Задание: Создай функцию, которая принимает список чисел и разделяет его на два списка: чётных и нечётных чисел. Используй условные операторы и лямбда-выражения. Выведи оба списка.
Подсказка: Используй функцию `filter` для разделения списка на чётные и нечётные числа.
*/
fun task3() {
    fun getEvenAndOddNumbers(list: List<Int>, v1: Int): List<Int> {
        val result = list.filter { it % 2 == v1 }
        return result
    }
    println("Чётные числа: ${getEvenAndOddNumbers(listOf(1,2,3,4,5,6,7,8,9,10), 0)}")
    println("Нечётные числа: ${getEvenAndOddNumbers(listOf(1,2,3,4,5,6,7,8,9,10), 1)}")
}

/*
Task4: Подсчёт слов в строке

Задание: Напиши функцию, которая принимает строку и возвращает количество слов в этой строке. Проверь работу функции на нескольких строках, включая пустую строку и строку с пробелами.
*/
fun task4() {
}

/*
Task5: Применение лямбда-выражений к списку строк

Задание: Создай список из нескольких строк. Используй функцию `map` и лямбда-выражение, чтобы преобразовать каждую строку в её обратный порядок символов. Выведи результат.
Подсказка: Используй метод `reversed` для обратного порядка символов в строке.
*/
fun task5() {

}

/*
Task6: Функция для нахождения среднего арифметического

Задание: Напиши функцию, которая принимает список чисел и возвращает их среднее арифметическое. Проверь работу функции на нескольких наборах данных.
Подсказка: Используй метод `sum` для нахождения суммы и раздели на количество элементов.
*/
fun task6() {
}

/*
Task7: Фильтрация списка по содержимому строки

Задание: Напиши функцию, которая принимает список строк и возвращает новый список, содержащий только строки, которые начинаются с заданной буквы. Используй функцию высшего порядка `filter`.
Подсказка: Используй метод `startsWith` в лямбда-выражении для фильтрации строк.
*/
fun task7() {
}

/*
Task8: Создание таблицы умножения

Задание: Напиши функцию, которая создает таблицу умножения для заданного числа и возвращает её в виде списка строк. Каждая строка должна быть вида "n * i = результат", где i меняется от 1 до 10.
Подсказка: Используй цикл `for` для создания строк таблицы.
*/
fun task8() {
}

/*
Task9: Проверка на наличие уникальных элементов

Задание: Напиши функцию, которая принимает список чисел и возвращает `true`, если все элементы списка уникальны, и `false` в противном случае.

*/
fun task9() {
}

/*
Task10: Функция для объединения и сортировки списков

Задание: Напиши функцию, которая принимает два списка чисел, объединяет их в один, удаляет дубликаты и возвращает отсортированный список. Проверь работу функции на разных наборах данных.
Подсказка: Используй функцию `union` для объединения списков и метод `sorted` для сортировки.
*/
fun task10() {
}

